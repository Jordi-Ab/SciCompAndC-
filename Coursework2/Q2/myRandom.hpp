
double** _allocateMatrixMemory(int n_rows, int n_cols);
void _freeMatrixMemory(int n_rows, double** matrix);

static void initRandomSeed();

/*
 * Implementation notes: setRandomSeed
 * -----------------------------------
 * The setRandomSeed function simply forwards its argument to srand.
 * The call to initRandomSeed is required to set the initialized flag.
 */
void setRandomSeed(int seed);

int randomInteger(int low, int high);

double randomReal(double low, double high);

double** createRandomMatrix(int n_rows, int n_cols, bool integer=true);

double* createRandomVector(int size, bool integer=true);


/*
 Basically, it chooses the last integer in the number generated by
 rand(). The problem of the bias towards the lowest value of the 
 interval is that rand() returns very large numbers, so the first
 numbers of rand() almost never change, so when doing all the
 manipulations to map the rand() to an integer on an interval, it
 almost always returned the lowest value. So instead of that I worked
 with the last integer of rand(), which do varies very much every time
 you run it for the first time.
 So, it returns a random integer between 2 and 9 inclusive.
*/
int myRandomInteger();
